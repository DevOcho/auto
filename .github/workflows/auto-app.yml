name: Python application

on:
  push:
    tags:
      - 'v*.*.*'
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Create and activate virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install flake8 pytest pyinstaller
        if [ -f build_requirements.txt ]; then pip install -r build_requirements.txt; fi

    - name: Lint with flake8
      run: |
        source venv/bin/activate
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=./venv/*
        flake8 . --count --exit-zero --max-complexity=12 --max-line-length=127 --statistics --exclude=./venv/*

    - name: Build with pyinstaller
      run: |
        source venv/bin/activate
        pyinstaller --onefile --name auto --add-data "venv/lib/python3.12/site-packages/pyfiglet/fonts:pyfiglet/fonts" ./auto/auto.py

    - name: List dist directory
      run: ls -l dist/

    - name: Create distribution directory
      run: |
        # Create a temporary directory to stage the release files
        mkdir -p release/auto-${{ github.ref_name }}
        # Copy the auto executable
        cp dist/auto release/auto-${{ github.ref_name}}/
        # Copy the config and k3s directories (preserving structure)
        cp -r auto/config release/auto-${{ github.ref_name }}/
        cp -r auto/k3s release/auto-${{ github.ref_name }}/

    - name: Create tar.gz archive
      run: |
        tar -czvf auto-${{ github.ref_name }}.tar.gz -C release auto-${{ github.ref_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: auto-executable
        path: auto-${{ github.ref_name }}.tar.gz
        if-no-files-found: error

    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.ref_name }}
        name: Release v${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          auto-${{ github.ref_name }}.tar.gz
          README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
